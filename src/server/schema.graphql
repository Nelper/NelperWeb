type Application implements Node {
  id: ID!
  state: ApplicationState
  task: Task
  user: User
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]
  totalCount: Int
  pendingCount: Int
}

type ApplicationEdge {
  node: Application
  cursor: String!
}

enum ApplicationState {
  PENDING
  CANCELED
  ACCEPTED
  DENIED
}

input ApplyForTaskInput {
  id: ID!
  price: Int!
  clientMutationId: String!
}

type ApplyForTaskPayload {
  task: Task
  clientMutationId: String!
}

type Browse {
  tasks(sort: BrowseTaskSort, maxDistance: Int, minPrice: Int, categories: [String], location: GeoPointInput, before: String, after: String, first: Int, last: Int): TaskConnection
}

enum BrowseTaskSort {
  DISTANCE
  PRICE
  DATE
}

input CancelApplyForTaskInput {
  id: ID!
  clientMutationId: String!
}

type CancelApplyForTaskPayload {
  task: Task
  clientMutationId: String!
}

input ChangeLanguageInput {
  language: String!
  clientMutationId: String!
}

type ChangeLanguagePayload {
  privateData: UserPrivate
  clientMutationId: String!
}

type File {
  name: String
  url: String
}

type GeoPoint {
  latitude: Float
  longitude: Float
}

input GeoPointInput {
  latitude: Float = 0.0
  longitude: Float = 0.0
}

type Location {
  name: String
  formattedAddress: String
  streetNumber: String
  route: String
  city: String
  province: String
  country: String
  postalCode: String
}

type Mutation {
  applyForTask(input: ApplyForTaskInput!): ApplyForTaskPayload
  cancelApplyForTask(input: CancelApplyForTaskInput!): CancelApplyForTaskPayload
  updateNotificationSettings(input: UpdateNotificationSettingsInput!): UpdateNotificationSettingsPayload
  changeLanguage(input: ChangeLanguageInput!): ChangeLanguagePayload
}

interface Node {
  id: ID!
}

type Notification {
  posterApplication: NotificationSetting
  posterRequestPayment: NotificationSetting
  nelperApplicationStatus: NotificationSetting
  nelperReceivedPayment: NotificationSetting
  newsletter: NotificationSetting
}

type NotificationSetting {
  email: Boolean
}

input NotificationSettingInput {
  email: Boolean
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  me: User
  browse: Browse
}

type Task implements Node {
  id: ID!
  createdAt: String
  title: String
  desc: String
  category: String
  city: String
  location: GeoPoint
  pictures: [File]
  priceOffered: Int
  user: User
  application: Application
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]
  totalCount: Int
}

type TaskEdge {
  node: Task
  cursor: String!
}

input UpdateNotificationSettingsInput {
  settingId: String
  settingValue: NotificationSettingInput
  clientMutationId: String!
}

type UpdateNotificationSettingsPayload {
  privateData: UserPrivate
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  name: String
  pictureURL: String
  tasks(before: String, after: String, first: Int, last: Int): TaskConnection
  applications(before: String, after: String, first: Int, last: Int): ApplicationConnection
  privateData: UserPrivate
}

type UserPrivate implements Node {
  id: ID!
  phone: String
  email: String
  language: String
  locations: [Location]
  notifications: Notification
}
