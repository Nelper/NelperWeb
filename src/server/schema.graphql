type Application implements Node {
  id: ID!
  objectId: String
  createdAt: String
  updatedAt: String
  state: ApplicationState
  price: Int
  task: Task
  user: User
  phone: String
  email: String
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]
  totalCount: Int
  pendingCount: Int
  hasNew: Boolean
  hasAccepted: Boolean
  accepted: Application
}

type ApplicationEdge {
  node: Application
  cursor: String!
}

enum ApplicationState {
  PENDING
  CANCELED
  ACCEPTED
  DENIED
}

input ApplyForTaskInput {
  id: ID!
  price: Int!
  clientMutationId: String!
}

type ApplyForTaskPayload {
  task: Task
  clientMutationId: String!
}

type Browse {
  tasks(sort: BrowseTaskSort, maxDistance: Int, minPrice: Int, categories: [String], location: GeoPointInput, before: String, after: String, first: Int, last: Int): TaskConnection
}

enum BrowseTaskSort {
  DISTANCE
  PRICE
  DATE
}

input CancelApplyForTaskInput {
  id: ID!
  clientMutationId: String!
}

type CancelApplyForTaskPayload {
  task: Task
  clientMutationId: String!
}

input ChangeLanguageInput {
  language: String!
  clientMutationId: String!
}

type ChangeLanguagePayload {
  privateData: UserPrivate
  clientMutationId: String!
}

input CreateChargeForApplicationInput {
  applicationId: ID!
  token: String!
  clientMutationId: String!
}

type CreateChargeForApplicationPayload {
  success: Boolean
  clientMutationId: String!
}

input CreateStripeAccountInput {
  clientMutationId: String!
}

type CreateStripeAccountPayload {
  success: Boolean
  clientMutationId: String!
}

input DeleteTaskInput {
  id: ID!
  clientMutationId: String!
}

type DeleteTaskPayload {
  deletedTaskId: ID
  me: User
  clientMutationId: String!
}

input EditLocationsInput {
  locations: [LocationInput]
  clientMutationId: String!
}

type EditLocationsPayload {
  privateData: UserPrivate
  clientMutationId: String!
}

input EditProfileInput {
  picture: FileInput
  about: String
  skills: [UserSkillInput]
  education: [UserEducationInput]
  experience: [UserExperienceInput]
  clientMutationId: String!
}

type EditProfilePayload {
  me: User
  clientMutationId: String!
}

input EditTaskInput {
  id: ID!
  title: String
  desc: String
  pictures: [FileInput]
  clientMutationId: String!
}

type EditTaskPayload {
  task: Task
  clientMutationId: String!
}

type Feedback {
  id: ID!
  objectId: String
  createdAt: String
  updatedAt: String
  rating: Int
  content: String
  user: User
  poster: User
  task: Task
}

type FeedbackConnection {
  pageInfo: PageInfo!
  edges: [FeedbackEdge]
  totalCount: Int
}

type FeedbackEdge {
  node: Feedback
  cursor: String!
}

type File {
  name: String
  url: String
}

input FileInput {
  name: String
  url: String
}

type GeoPoint {
  latitude: Float
  longitude: Float
}

input GeoPointInput {
  latitude: Float = 0.0
  longitude: Float = 0.0
}

type Location {
  name: String
  formattedAddress: String
  streetNumber: String
  route: String
  city: String
  province: String
  country: String
  postalCode: String
  coords: GeoPoint
}

input LocationInput {
  name: String
  formattedAddress: String
  streetNumber: String!
  route: String!
  city: String!
  province: String!
  country: String!
  postalCode: String!
  coords: GeoPointInput!
}

type Mutation {
  postTask(input: PostTaskInput!): PostTaskPayload
  editTask(input: EditTaskInput!): EditTaskPayload
  deleteTask(input: DeleteTaskInput!): DeleteTaskPayload
  applyForTask(input: ApplyForTaskInput!): ApplyForTaskPayload
  cancelApplyForTask(input: CancelApplyForTaskInput!): CancelApplyForTaskPayload
  setApplicationState(input: SetApplicationStateInput!): SetApplicationStatePayload
  editProfile(input: EditProfileInput!): EditProfilePayload
  editLocations(input: EditLocationsInput!): EditLocationsPayload
  updateNotificationSettings(input: UpdateNotificationSettingsInput!): UpdateNotificationSettingsPayload
  changeLanguage(input: ChangeLanguageInput!): ChangeLanguagePayload
  createChargeForApplication(input: CreateChargeForApplicationInput!): CreateChargeForApplicationPayload
  createStripeAccount(input: CreateStripeAccountInput!): CreateStripeAccountPayload
}

interface Node {
  id: ID!
}

type Notification {
  posterApplication: NotificationSetting
  posterRequestPayment: NotificationSetting
  nelperApplicationStatus: NotificationSetting
  nelperReceivedPayment: NotificationSetting
  newsletter: NotificationSetting
}

type NotificationSetting {
  email: Boolean
}

input NotificationSettingInput {
  email: Boolean
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PostTaskInput {
  title: String!
  category: String!
  desc: String!
  priceOffered: Int!
  location: LocationInput!
  pictures: [FileInput]
  clientMutationId: String!
}

type PostTaskPayload {
  me: User
  newTaskEdge: TaskEdge
  clientMutationId: String!
}

type Query {
  node(id: ID!): Node
  me: User
  browse: Browse
}

input SetApplicationStateInput {
  taskId: ID!
  applicationId: ID!
  state: ApplicationState
  clientMutationId: String!
}

type SetApplicationStatePayload {
  task: Task
  application: Application
  clientMutationId: String!
}

type Task implements Node {
  id: ID!
  objectId: String
  createdAt: String
  updatedAt: String
  state: TaskState
  completionState: TaskCompletionState
  title: String
  desc: String
  category: String
  city: String
  location: GeoPoint
  pictures: [File]
  priceOffered: Int
  user: User
  application: Application
  applications: ApplicationConnection
  userPrivate: TaskPosterUserPrivate
}

enum TaskCompletionState {
  ACCEPTED
  PAYMENT_SENT
  COMPLETED
  RATED
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]
  totalCount: Int
}

type TaskEdge {
  node: Task
  cursor: String!
}

type TaskPosterUserPrivate {
  phone: String
  email: String
  exactLocation: Location
}

enum TaskState {
  PENDING
  ACCEPTED
  DELETED
  COMPLETED
}

input UpdateNotificationSettingsInput {
  settingId: String
  settingValue: NotificationSettingInput
  clientMutationId: String!
}

type UpdateNotificationSettingsPayload {
  privateData: UserPrivate
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  objectId: String
  createdAt: String
  updatedAt: String
  logged: Boolean
  name: String
  pictureURL: String
  rating: Float
  tasksCompleted: Int
  about: String
  skills: [UserSkill]
  experience: [UserExperience]
  education: [UserEducation]
  feedback(before: String, after: String, first: Int, last: Int): FeedbackConnection
  tasks(before: String, after: String, first: Int, last: Int): TaskConnection
  applications(before: String, after: String, first: Int, last: Int): ApplicationConnection
  privateData: UserPrivate
}

type UserEducation {
  title: String
}

input UserEducationInput {
  title: String
}

type UserExperience {
  title: String
}

input UserExperienceInput {
  title: String
}

type UserPrivate implements Node {
  id: ID!
  objectId: String
  createdAt: String
  updatedAt: String
  phone: String
  email: String
  language: String
  location: GeoPoint
  locations: [Location]
  notifications: Notification
}

type UserSkill {
  title: String
}

input UserSkillInput {
  title: String
}
